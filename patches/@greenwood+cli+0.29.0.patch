diff --git a/node_modules/@greenwood/cli/src/loader.js b/node_modules/@greenwood/cli/src/loader.js
index 238fefc..a359ecf 100644
--- a/node_modules/@greenwood/cli/src/loader.js
+++ b/node_modules/@greenwood/cli/src/loader.js
@@ -12,7 +12,7 @@ async function getCustomLoaderResponse(url, body = '', checkOnly = false) {
   const headers = new Headers({
     'Content-Type': 'text/javascript'
   });
-  const request = new Request(url.href, { headers });
+  const request = new Request(url, { headers });
   const initResponse = new Response(body, { headers });
   let response = initResponse.clone();
   let shouldHandle = false;
@@ -46,18 +46,20 @@ async function getCustomLoaderResponse(url, body = '', checkOnly = false) {
 // https://nodejs.org/docs/latest-v18.x/api/esm.html#resolvespecifier-context-nextresolve
 export async function resolve(specifier, context, defaultResolve) {
   const { parentURL } = context;
+  console.log('resolve 1', { specifier, parentURL }); // resolve { specifier: './hero.html?type=html' }
   const url = specifier.startsWith('file://')
     ? new URL(specifier)
     : specifier.startsWith('.')
       ? new URL(specifier, parentURL)
       : undefined;
 
+  console.log('resolve 2', { url });
   if (url) {
     const { shouldHandle } = await getCustomLoaderResponse(url, null, true);
 
     if (shouldHandle) {
       return {
-        url: url.href,
+        url: url.href.replace('?type=html', ''),
         shortCircuit: true
       };
     }
@@ -69,10 +71,13 @@ export async function resolve(specifier, context, defaultResolve) {
 // https://nodejs.org/docs/latest-v18.x/api/esm.html#loadurl-context-nextload
 export async function load(source, context, defaultLoad) {
   const extension = source.split('.').pop();
+  console.log('load', { source });
   const url = new URL(`${source}?type=${extension}`);
   const { shouldHandle } = await getCustomLoaderResponse(url, null, true);
 
+  console.log('load', { shouldHandle });
   if (shouldHandle) {
+    console.log('handle!');
     const contents = await fs.readFile(url, 'utf-8');
     const { response } = await getCustomLoaderResponse(url, contents);
     const body = await response.text();
