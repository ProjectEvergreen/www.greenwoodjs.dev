diff --git a/node_modules/@greenwood/cli/src/lib/layout-utils.js b/node_modules/@greenwood/cli/src/lib/layout-utils.js
index e397396..8dbf281 100644
--- a/node_modules/@greenwood/cli/src/lib/layout-utils.js
+++ b/node_modules/@greenwood/cli/src/lib/layout-utils.js
@@ -227,15 +227,29 @@ async function getAppLayout(pageLayoutContents, compilation, customImports = [],
     const mergedStyles = [
       ...appRoot.querySelectorAll('head style'),
       ...[...(pageRoot && pageRoot.querySelectorAll('head style')) || []],
-      ...customImports.filter(resource => resource.split('.').pop() === 'css')
-        .map(resource => `<link rel="stylesheet" href="${resource}"></link>`)
+      ...customImports.filter(resource => resource.split(' ')[0].split('.').pop() === 'css')
+        .map((resource) => {
+          const [href, ...attributes] = resource.split(' ');
+          const attrs = attributes?.length > 0
+            ? attributes.join(' ')
+            : '';
+
+          return `<link rel="stylesheet" href="${href}" ${attrs}></link>`;
+        })
     ].join('\n');
 
     const mergedScripts = [
       ...appRoot.querySelectorAll('head script'),
       ...[...(pageRoot && pageRoot.querySelectorAll('head script')) || []],
-      ...customImports.filter(resource => resource.split('.').pop() === 'js')
-        .map(resource => `<script src="${resource}" type="module"></script>`)
+      ...customImports.filter(resource => resource.split(' ')[0].split('.').pop() === 'js')
+        .map((resource) => {
+          const [src, ...attributes] = resource.split(' ');
+          const attrs = attributes?.length > 0
+            ? attributes.join(' ')
+            : '';
+
+          return `<script src="${src}" ${attrs}></script>`;
+        })
     ].join('\n');
 
     const finalBody = pageLayoutContents
diff --git a/node_modules/@greenwood/cli/src/lifecycles/bundle.js b/node_modules/@greenwood/cli/src/lifecycles/bundle.js
index 21636a9..7a01fe0 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/bundle.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/bundle.js
@@ -105,7 +105,7 @@ async function optimizeStaticPages(compilation, plugins) {
       }
 
       // clean up optimization markers
-      const body = (await response.text()).replace(/data-gwd-opt=".*[a-z]"/g, '');
+      const body = (await response.text()).replace(/data-gwd-opt=".*?[a-z]"/g, '');
 
       await fs.writeFile(new URL(`.${outputPath}`, outputDir), body);
     })
diff --git a/node_modules/@greenwood/cli/src/loader.js b/node_modules/@greenwood/cli/src/loader.js
index 657ab4e..792f43c 100644
--- a/node_modules/@greenwood/cli/src/loader.js
+++ b/node_modules/@greenwood/cli/src/loader.js
@@ -7,6 +7,7 @@ const resourcePlugins = config.plugins
   .filter(plugin => plugin.name !== 'plugin-node-modules:resource' && plugin.name !== 'plugin-user-workspace')
   .map(plugin => plugin.provider({
     context: {
+      outputDir: new URL(`file://${process.cwd()}/public`),
       projectDirectory: new URL(`file://${process.cwd()}/`),
       scratchDir: new URL(`file://${process.cwd()}/.greenwood/`)
     },
diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
index b0cdbcb..d7f749d 100644
--- a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
@@ -49,23 +49,27 @@ function bundleCss(body, url, compilation) {
           barePath = barePath.replace('/', '');
         }
 
-        const locationUrl = barePath.startsWith('node_modules')
+        const locationUrl = barePath.indexOf('node_modules/') >= 0
           ? new URL(`./${barePath}`, projectDirectory)
           : new URL(`./${barePath}`, userWorkspace);
 
         if (fs.existsSync(locationUrl)) {
           const hash = hashString(fs.readFileSync(locationUrl, 'utf-8'));
           const ext = barePath.split('.').pop();
-          const hashedRoot = barePath.replace(`.${ext}`, `.${hash}.${ext}`);
-
-          fs.mkdirSync(new URL(`./${path.dirname(barePath)}/`, outputDir), {
-            recursive: true
-          });
-
-          fs.promises.copyFile(
-            locationUrl,
-            new URL(`./${hashedRoot}`, outputDir)
-          );
+          const hashedRoot = process.env.__GWD_COMMAND__ === 'develop'
+            ? barePath
+            : barePath.replace(`.${ext}`, `.${hash}.${ext}`)
+
+          if (process.env.__GWD_COMMAND__ !== 'develop') {
+            fs.mkdirSync(new URL(`./${path.dirname(hashedRoot)}/`, outputDir), {
+              recursive: true
+            });
+
+            fs.promises.copyFile(
+              locationUrl,
+              new URL(`./${hashedRoot}`, outputDir)
+            );
+          }
 
           optimizedCss += `url('${basePath}${hashedRoot}')`;
         } else {
@@ -304,33 +308,36 @@ class StandardCssResource extends ResourceInterface {
   }
 
   async shouldIntercept(url, request) {
-    const { pathname, searchParams } = url;
+    const { pathname } = url;
     const ext = pathname.split('.').pop();
 
-    return url.protocol === 'file:' && ext === this.extensions[0] && request.headers.get('Accept')?.indexOf('text/javascript') >= 0 && !searchParams.has('type');
+    return url.protocol === 'file:' && ext === this.extensions[0];
   }
 
   async intercept(url, request, response) {
-    const contents = (await response.text()).replace(/\r?\n|\r/g, ' ').replace(/\\/g, '\\\\');
-    const body = `const sheet = new CSSStyleSheet();sheet.replaceSync(\`${contents}\`);export default sheet;`;
+    let body = bundleCss(await response.text(), url, this.compilation);
+    let headers = {};
 
-    return new Response(body, {
-      headers: {
-        'Content-Type': 'text/javascript'
-      }
-    });
-  }
+    if (request.headers.get('Accept')?.indexOf('text/javascript') >= 0 && !url.searchParams.has('type')) {
+      const contents = (body).replace(/\r?\n|\r/g, ' ').replace(/\\/g, '\\\\');
 
-  async shouldOptimize(url, response) {
-    const { protocol, pathname, searchParams } = url;
-    const isValidCss = pathname.split('.').pop() === this.extensions[0]
-      && protocol === 'file:'
-      && response.headers.get('Content-Type').indexOf(this.contentType) >= 0
-      && searchParams.get('type') !== 'css';
+      body = `const sheet = new CSSStyleSheet();sheet.replaceSync(\`${contents}\`);export default sheet;`;
+      headers['Content-Type'] = 'text/javascript';
+    }
 
-    return this.compilation.config.optimization !== 'none' && isValidCss;
+    return new Response(body, { headers });
   }
 
+  // async shouldOptimize(url, response) {
+  //   const { protocol, pathname, searchParams } = url;
+  //   const isValidCss = pathname.split('.').pop() === this.extensions[0]
+  //     && protocol === 'file:'
+  //     && response.headers.get('Content-Type').indexOf(this.contentType) >= 0
+  //     && searchParams.get('type') !== 'css';
+
+  //   return this.compilation.config.optimization !== 'none' && isValidCss;
+  // }
+
   async optimize(url, response) {
     const body = await response.text();
     const optimizedBody = bundleCss(body, url, this.compilation);
