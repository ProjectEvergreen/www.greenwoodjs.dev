diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
index e0d8dac..4419e56 100644
--- a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
@@ -10,7 +10,7 @@ import { parse, walk } from "css-tree";
 import { hashString } from "../../lib/hashing-utils.js";
 import { getResolvedHrefFromPathnameShortcut } from "../../lib/node-modules-utils.js";
 import { isLocalLink } from "../../lib/resource-utils.js";
-import { derivePackageRoot } from "../../lib/walker-package-ranger.js";
+import { derivePackageRoot, resolveBareSpecifier } from "../../lib/walker-package-ranger.js";
 
 function bundleCss(body, sourceUrl, compilation, workingUrl) {
   const { projectDirectory, outputDir, userWorkspace, scratchDir } = compilation.context;
@@ -31,6 +31,7 @@ function bundleCss(body, sourceUrl, compilation, workingUrl) {
         this.atrule.name === "import"
       ) {
         const { value } = node;
+        const segments = value.split('/') ?? '';
 
         if (isLocalLink(value)) {
           if (value.startsWith(".") || value.indexOf("/node_modules") === 0) {
@@ -47,6 +48,26 @@ function bundleCss(body, sourceUrl, compilation, workingUrl) {
             const importContents = fs.readFileSync(resolvedUrl, "utf-8");
 
             optimizedCss += bundleCss(importContents, workingUrl, compilation);
+          } else if(segments[0].startsWith('@') || (!segments[0].startsWith('.') && !segments[0].startsWith('/'))) {
+            console.log('maybe we have a bare specifier?!?!!?!', value, segments)
+
+            try {
+              // const specifier = segments[0].startsWith('@')
+              //   ? `${segments[0]}/${segments[1]}`
+              //   : segments[0];
+              // console.log({ specifier, value });
+              const resolvedUrl = import.meta.resolve(value);
+              console.log({ resolvedUrl });
+              
+              const importContents = fs.readFileSync(new URL(resolvedUrl).pathname, "utf-8");
+              // console.log({ importContents });
+
+              optimizedCss += bundleCss(importContents, sourceUrl, compilation, resolvedUrl);
+            } catch(e) {
+              // TODO need to gaurd for `import.meta.resolve` not supported in custom loaders
+              // https://nodejs.org/api/esm.html#importmetaresolvespecifier
+              console.error({ e });
+            }
           } else {
             console.warn(`Unable to resolve ${value} from file => ${sourceUrl}`);
           }
