diff --git a/node_modules/@greenwood/cli/src/config/rollup.config.js b/node_modules/@greenwood/cli/src/config/rollup.config.js
index 53734d8..fa565a2 100644
--- a/node_modules/@greenwood/cli/src/config/rollup.config.js
+++ b/node_modules/@greenwood/cli/src/config/rollup.config.js
@@ -354,7 +354,7 @@ function greenwoodImportMetaUrl(compilation) {
           for (const entry of compilation.manifest.apis.keys()) {
             const apiRoute = compilation.manifest.apis.get(entry);
 
-            if (normalizedId.endsWith(apiRoute.path)) {
+            if (normalizedId.endsWith(apiRoute.pagePath.replace('.', ''))) {
               const assets = apiRoute.assets || [];
 
               assets.push(assetUrl.url.href);
@@ -646,7 +646,7 @@ const getRollupConfigForApiRoutes = async (compilation) => {
   const { outputDir, pagesDir, apisDir } = compilation.context;
 
   return [...compilation.manifest.apis.values()]
-    .map(api => normalizePathnameForWindows(new URL(`.${api.path}`, pagesDir)))
+    .map(api => normalizePathnameForWindows(new URL(api.pagePath, pagesDir)))
     .map((filepath) => {
       // account for windows pathname shenanigans by "casting" filepath to a URL first
       const ext = filepath.split('.').pop();
diff --git a/node_modules/@greenwood/cli/src/data/queries.js b/node_modules/@greenwood/cli/src/data/queries.js
new file mode 100644
index 0000000..866e296
--- /dev/null
+++ b/node_modules/@greenwood/cli/src/data/queries.js
@@ -0,0 +1,22 @@
+// TODO how to sync host and port with greenwood config
+const host = 'localhost';
+const port = 1985;
+
+async function getContent() {
+  return await fetch(`http://${host}:${port}/graph.json`)
+    .then(resp => resp.json());
+}
+
+async function getContentByCollection(collection = '') {
+  return (await fetch(`http://${host}:${port}/graph.json`)
+    .then(resp => resp.json()))
+    .filter(page => page?.data?.collection === collection);
+}
+
+async function getContentByRoute(route = '') {
+  return (await fetch(`http://${host}:${port}/graph.json`)
+    .then(resp => resp.json()))
+    .filter(page => page?.route.startsWith(route));
+}
+
+export { getContent, getContentByCollection, getContentByRoute };
\ No newline at end of file
diff --git a/node_modules/@greenwood/cli/src/lib/layout-utils.js b/node_modules/@greenwood/cli/src/lib/layout-utils.js
index 8dbf281..a6f252e 100644
--- a/node_modules/@greenwood/cli/src/lib/layout-utils.js
+++ b/node_modules/@greenwood/cli/src/lib/layout-utils.js
@@ -30,10 +30,10 @@ async function getCustomPageLayoutsFromPlugins(compilation, layoutName) {
   return customLayoutLocations;
 }
 
-async function getPageLayout(filePath, compilation, layout) {
+async function getPageLayout(filePath = '', compilation, layout) {
   const { config, context } = compilation;
-  const { layoutsDir, userLayoutsDir, pagesDir, projectDirectory } = context;
-  const filePathUrl = new URL(`${filePath}`, projectDirectory);
+  const { layoutsDir, userLayoutsDir, pagesDir } = context;
+  const filePathUrl = new URL(filePath, pagesDir);
   const customPageFormatPlugins = config.plugins
     .filter(plugin => plugin.type === 'resource' && !plugin.isGreenwoodDefaultPlugin)
     .map(plugin => plugin.provider(compilation));
@@ -43,13 +43,13 @@ async function getPageLayout(filePath, compilation, layout) {
     && await customPageFormatPlugins[0].shouldServe(filePathUrl);
   const customPluginDefaultPageLayouts = await getCustomPageLayoutsFromPlugins(compilation, 'page');
   const customPluginPageLayouts = await getCustomPageLayoutsFromPlugins(compilation, layout);
-  const extension = filePath.split('.').pop();
-  const is404Page = filePath.startsWith('404') && extension === 'html';
+  const extension = filePath?.split('.')?.pop();
+  const is404Page = filePath?.endsWith('404.html') && extension === 'html';
   const hasCustomStaticLayout = await checkResourceExists(new URL(`./${layout}.html`, userLayoutsDir));
   const hasCustomDynamicLayout = await checkResourceExists(new URL(`./${layout}.js`, userLayoutsDir));
   const hasPageLayout = await checkResourceExists(new URL('./page.html', userLayoutsDir));
   const hasCustom404Page = await checkResourceExists(new URL('./404.html', pagesDir));
-  const isHtmlPage = extension === 'html' && await checkResourceExists(new URL(`./${filePath}`, projectDirectory));
+  const isHtmlPage = extension === 'html' && await checkResourceExists(new URL(filePath, pagesDir));
   let contents;
 
   if (layout && (customPluginPageLayouts.length > 0 || hasCustomStaticLayout)) {
@@ -108,11 +108,11 @@ async function getPageLayout(filePath, compilation, layout) {
 }
 
 /* eslint-disable-next-line complexity */
-async function getAppLayout(pageLayoutContents, compilation, customImports = [], frontmatterTitle) {
+async function getAppLayout(pageLayoutContents, compilation, customImports = [], matchingRoute) {
+  const activeFrontmatterTitleKey = '${globalThis.page.title}';
   const enableHud = compilation.config.devServer.hud;
   const { layoutsDir, userLayoutsDir } = compilation.context;
   const userStaticAppLayoutUrl = new URL('./app.html', userLayoutsDir);
-  // TODO support more than just .js files
   const userDynamicAppLayoutUrl = new URL('./app.js', userLayoutsDir);
   const userHasStaticAppLayout = await checkResourceExists(userStaticAppLayoutUrl);
   const userHasDynamicAppLayout = await checkResourceExists(userDynamicAppLayoutUrl);
@@ -193,20 +193,25 @@ async function getAppLayout(pageLayoutContents, compilation, customImports = [],
     const appBody = appRoot.querySelector('body') ? appRoot.querySelector('body').innerHTML : '';
     const pageBody = pageRoot && pageRoot.querySelector('body') ? pageRoot.querySelector('body').innerHTML : '';
     const pageTitle = pageRoot && pageRoot.querySelector('head title');
-    const hasInterpolatedFrontmatter = pageTitle && pageTitle.rawText.indexOf('${globalThis.page.title}') >= 0
-     || appTitle && appTitle.rawText.indexOf('${globalThis.page.title}') >= 0;
+    const hasActiveFrontmatterTitle = compilation.config.activeFrontmatter && (pageTitle && pageTitle.rawText.indexOf(activeFrontmatterTitleKey) >= 0
+      || appTitle && appTitle.rawText.indexOf(activeFrontmatterTitleKey) >= 0);
+    let title;
 
-    const title = hasInterpolatedFrontmatter // favor frontmatter interpolation first
-      ? pageTitle && pageTitle.rawText
+    if (hasActiveFrontmatterTitle) {
+      const text = pageTitle && pageTitle.rawText.indexOf(activeFrontmatterTitleKey) >= 0
         ? pageTitle.rawText
-        : appTitle.rawText
-      : frontmatterTitle // otherwise, work in order of specificity from page -> page layout -> app layout
-        ? frontmatterTitle
+        : appTitle.rawText;
+
+      title = text.replace(activeFrontmatterTitleKey, matchingRoute.title || matchingRoute.label);
+    } else {
+      title = matchingRoute.title
+        ? matchingRoute.title
         : pageTitle && pageTitle.rawText
           ? pageTitle.rawText
           : appTitle && appTitle.rawText
             ? appTitle.rawText
-            : 'My App';
+            : matchingRoute.label;
+    }
 
     const mergedHtml = pageRoot && pageRoot.querySelector('html').rawAttrs !== ''
       ? `<html ${pageRoot.querySelector('html').rawAttrs}>`
diff --git a/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js b/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js
index 5ce30c1..11195a7 100644
--- a/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js
+++ b/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js
@@ -217,15 +217,30 @@ async function walkPackageJson(packageJson = {}) {
 
 function mergeImportMap(html = '', map = {}) {
   // es-modules-shims breaks on dangling commas in an importMap :/
-  const danglingComma = html.indexOf('"imports": {}') > 0 ? '' : ',';
+  const hasImportMap = html.indexOf('script type="importmap"') > 0;
+  const danglingComma = hasImportMap && html.indexOf('"imports": {}') > 0 ? '' : ',';
   const importMap = JSON.stringify(map).replace('}', '').replace('{', '');
 
-  const merged = html.replace('"imports": {', `
-    "imports": {
-      ${importMap}${danglingComma}
-  `);
-
-  return merged;
+  // TODO looks like this was never working correctly!? :o
+  // console.log({ hasImportMap, html, map, danglingComma, importMap });
+  if (hasImportMap) {
+    return html.replace('"imports": {', `
+      "imports": {
+        ${importMap}${danglingComma}
+    `);
+  } else {
+    // TODO this needs tp account for import map shim polyfill config
+    return html.replace('<head>', `
+      <head>
+      <script type="importmap">
+        {
+          "imports": {
+            ${importMap}
+          }
+        }
+      </script>
+    `)
+  }
 }
 
 export {
diff --git a/node_modules/@greenwood/cli/src/lifecycles/bundle.js b/node_modules/@greenwood/cli/src/lifecycles/bundle.js
index 9c963f7..ae467bd 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/bundle.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/bundle.js
@@ -243,16 +243,14 @@ async function bundleSsrPages(compilation, optimizePlugins) {
     // and before we optimize so that all bundled assets can tracked up front
     // would be nice to see if this can be done in a single pass though...
     for (const page of ssrPages) {
-      const { imports, route, layout, title, relativeWorkspacePagePath } = page;
-      const moduleUrl = new URL(`.${relativeWorkspacePagePath}`, pagesDir);
+      const { imports, route, layout, pagePath } = page;
+      const moduleUrl = new URL(pagePath, pagesDir);
       const request = new Request(moduleUrl);
-      // TODO getLayout has to be static (for now?)
-      // https://github.com/ProjectEvergreen/greenwood/issues/955
       const data = await executeRouteModule({ moduleUrl, compilation, page, prerender: false, htmlContents: null, scripts: [], request });
       let staticHtml = '';
 
-      staticHtml = data.layout ? data.layout : await getPageLayout(staticHtml, compilation, layout);
-      staticHtml = await getAppLayout(staticHtml, compilation, imports, title);
+      staticHtml = data.layout ? data.layout : await getPageLayout(pagePath, compilation, layout);
+      staticHtml = await getAppLayout(staticHtml, compilation, imports, page);
       staticHtml = await getUserScripts(staticHtml, compilation);
       staticHtml = await (await interceptPage(new URL(`http://localhost:8080${route}`), new Request(new URL(`http://localhost:8080${route}`)), getPluginInstances(compilation), staticHtml)).text();
 
@@ -268,14 +266,13 @@ async function bundleSsrPages(compilation, optimizePlugins) {
 
     // second pass to link all bundled assets to their resources before optimizing and generating SSR bundles
     for (const page of ssrPages) {
-      const { filename, route, relativeWorkspacePagePath } = page;
-      const entryFileUrl = new URL(`.${relativeWorkspacePagePath}`, scratchDir);
-      const outputPathRootUrl = new URL(`file://${path.dirname(entryFileUrl.pathname)}`);
+      const { route, pagePath } = page;
+      const entryFileUrl = new URL(pagePath, pagesDir);
+      const entryFileOutputUrl = new URL(`file://${entryFileUrl.pathname.replace(pagesDir.pathname, scratchDir.pathname)}`);
+      const outputPathRootUrl = new URL(`file://${path.dirname(entryFileOutputUrl.pathname)}/`);
       const htmlOptimizer = config.plugins.find(plugin => plugin.name === 'plugin-standard-html').provider(compilation);
       const pagesPathDiff = context.pagesDir.pathname.replace(context.projectDirectory.pathname, '');
-      const relativeDepth = relativeWorkspacePagePath.replace(`/${filename}`, '') === ''
-        ? '../'
-        : '../'.repeat(relativeWorkspacePagePath.replace(`/${filename}`, '').split('/').length);
+      const relativeDepth = '../'.repeat(pagePath.split('/').length - 1);
 
       let staticHtml = ssrPrerenderPagesRouteMapper[route];
       staticHtml = await (await htmlOptimizer.optimize(new URL(`http://localhost:8080${route}`), new Response(staticHtml))).text();
@@ -288,10 +285,10 @@ async function bundleSsrPages(compilation, optimizePlugins) {
       }
 
       // better way to write out this inline code?
-      await fs.writeFile(entryFileUrl, `
+      await fs.writeFile(entryFileOutputUrl, `
         import { executeRouteModule } from '${normalizePathnameForWindows(executeModuleUrl)}';
 
-        const moduleUrl = new URL('${relativeDepth}${pagesPathDiff}${relativeWorkspacePagePath.replace('/', '')}', import.meta.url);
+        const moduleUrl = new URL('${relativeDepth}${pagesPathDiff}${pagePath.replace('./', '')}', import.meta.url);
 
         export async function handler(request) {
           const compilation = JSON.parse('${JSON.stringify(compilation)}');
@@ -311,7 +308,7 @@ async function bundleSsrPages(compilation, optimizePlugins) {
         }
       `);
 
-      input.push(normalizePathnameForWindows(entryFileUrl));
+      input.push(normalizePathnameForWindows(entryFileOutputUrl));
     }
 
     const ssrConfigs = await getRollupConfigForSsrPages(compilation, input);
diff --git a/node_modules/@greenwood/cli/src/lifecycles/config.js b/node_modules/@greenwood/cli/src/lifecycles/config.js
index 9c31a23..807a79e 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/config.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/config.js
@@ -46,7 +46,7 @@ const defaultConfig = {
   port: 8080,
   basePath: '',
   optimization: optimizations[0],
-  interpolateFrontmatter: false,
+  activeFrontmatter: false,
   plugins: greenwoodPlugins,
   markdown: { plugins: [], settings: {} },
   prerender: false,
@@ -82,7 +82,7 @@ const readAndMergeConfig = async() => {
       if (hasConfigFile) {
         const userCfgFile = (await import(configUrl)).default;
         // eslint-disable-next-line max-len
-        const { workspace, devServer, markdown, optimization, plugins, port, prerender, basePath, staticRouter, pagesDirectory, layoutsDirectory, interpolateFrontmatter, isolation, polyfills } = userCfgFile;
+        const { workspace, devServer, markdown, optimization, plugins, port, prerender, basePath, staticRouter, pagesDirectory, layoutsDirectory, activeFrontmatter, isolation, polyfills } = userCfgFile;
 
         // workspace validation
         if (workspace) {
@@ -103,11 +103,11 @@ const readAndMergeConfig = async() => {
           reject(`Error: provided optimization "${optimization}" is not supported.  Please use one of: ${optimizations.join(', ')}.`);
         }
 
-        if (interpolateFrontmatter) {
-          if (typeof interpolateFrontmatter !== 'boolean') {
-            reject('Error: greenwood.config.js interpolateFrontmatter must be a boolean');
+        if (activeFrontmatter) {
+          if (typeof activeFrontmatter !== 'boolean') {
+            reject('Error: greenwood.config.js activeFrontmatter must be a boolean');
           }
-          customConfig.interpolateFrontmatter = interpolateFrontmatter;
+          customConfig.activeFrontmatter = activeFrontmatter;
         }
 
         if (plugins && plugins.length > 0) {
diff --git a/node_modules/@greenwood/cli/src/lifecycles/graph.js b/node_modules/@greenwood/cli/src/lifecycles/graph.js
index a1d16e5..7c9437e 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/graph.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/graph.js
@@ -5,13 +5,33 @@ import { checkResourceExists, requestAsObject } from '../lib/resource-utils.js';
 import toc from 'markdown-toc';
 import { Worker } from 'worker_threads';
 
+function getLabelFromRoute(_route) {
+  let route = _route;
+
+  if (route === '/index/') {
+    return 'Home';
+  } else if (route.endsWith('/index/')) {
+    route = route.replace('index/', '');
+  }
+
+  return route
+    .split('/')
+    .filter(part => part !== '')
+    .pop()
+    .split('-')
+    .map((routePart) => {
+      return `${routePart.charAt(0).toUpperCase()}${routePart.substring(1)}`;
+    })
+    .join(' ');
+}
 const generateGraph = async (compilation) => {
 
   return new Promise(async (resolve, reject) => {
     try {
       const { context, config } = compilation;
       const { basePath } = config;
-      const { pagesDir, projectDirectory, userWorkspace } = context;
+      const { pagesDir, userWorkspace } = context;
+      const collections = {};
       const customPageFormatPlugins = config.plugins
         .filter(plugin => plugin.type === 'resource' && !plugin.isGreenwoodDefaultPlugin)
         .map(plugin => plugin.provider(compilation));
@@ -19,11 +39,10 @@ const generateGraph = async (compilation) => {
       let apis = new Map();
       let graph = [{
         outputPath: '/index.html',
-        filename: 'index.html',
-        path: '/',
+        pagePath: './src/index.html',
         route: `${basePath}/`,
-        id: 'index',
-        label: 'Index',
+        label: 'Home',
+        title: null,
         data: {},
         imports: [],
         resources: [],
@@ -50,14 +69,14 @@ const generateGraph = async (compilation) => {
             const isCustom = customPageFormatPlugins[0] && customPageFormatPlugins[0].shouldServe && await customPageFormatPlugins[0].shouldServe(filenameUrl, req)
               ? customPageFormatPlugins[0].servePage
               : null;
-            const relativePagePath = filenameUrl.pathname.replace(pagesDir.pathname, '/');
-            const relativeWorkspacePath = directory.pathname.replace(projectDirectory.pathname, '');
+            const relativePagePath = filenameUrl.pathname.replace(pagesDir.pathname, './');
             const isStatic = isCustom === 'static' || extension === '.md' || extension === '.html';
             const isDynamic = isCustom === 'dynamic' || extension === '.js';
-            const isApiRoute = relativePagePath.startsWith('/api');
             const isPage = isStatic || isDynamic;
+            let route = `${relativePagePath.replace('.', '').replace(`${extension}`, '')}`;
+            let fileContents;
 
-            if (isApiRoute) {
+            if (route.startsWith('/api/')) {
               const req = new Request(filenameUrl);
               const extension = filenameUrl.pathname.split('.').pop();
               const isCustom = customPageFormatPlugins[0] && customPageFormatPlugins[0].shouldServe && await customPageFormatPlugins[0].shouldServe(filenameUrl, req);
@@ -67,9 +86,7 @@ const generateGraph = async (compilation) => {
                 return;
               }
 
-              const relativeApiPath = filenameUrl.pathname.replace(pagesDir.pathname, '/');
-              const route = `${basePath}${relativeApiPath.replace(`.${extension}`, '')}`;
-              // TODO should this be run in isolation like SSR pages?
+              // should this be run in isolation like SSR pages?
               // https://github.com/ProjectEvergreen/greenwood/issues/991
               const { isolation } = await import(filenameUrl).then(module => module);
 
@@ -82,21 +99,19 @@ const generateGraph = async (compilation) => {
               * route: URL route for a given page on outputFilePath
               * isolation: if this should be run in isolated mode
               */
-              apiRoutes.set(route, {
-                filename: filename,
-                outputPath: relativeApiPath,
-                path: relativeApiPath,
-                route,
+              apiRoutes.set(`${basePath}${route}`, {
+                pagePath: relativePagePath,
+                outputPath: relativePagePath,
+                route: `${basePath}${route}`,
                 isolation
               });
             } else if (isPage) {
-              let route = relativePagePath.replace(extension, '');
-              let id = filename.split('/')[filename.split('/').length - 1].replace(extension, '');
+              let root = filename.split('/')[filename.split('/').length - 1].replace(extension, '');
               let layout = extension === '.html' ? null : 'page';
               let title = null;
+              let label = getLabelFromRoute(`${route}/`);
               let imports = [];
               let customData = {};
-              let filePath;
               let prerender = true;
               let isolation = false;
               let hydration = false;
@@ -109,9 +124,9 @@ const generateGraph = async (compilation) => {
               * - pages/blog/index.{html,md,js} -> /blog/
               * - pages/blog/some-post.{html,md,js} -> /blog/some-post/
               */
-              if (relativePagePath.lastIndexOf('/') > 0) {
+              if (relativePagePath.lastIndexOf('/index') > 0) {
                 // https://github.com/ProjectEvergreen/greenwood/issues/455
-                route = id === 'index' || route.replace('/index', '') === `/${id}`
+                route = root === 'index' || route.replace('/index', '') === `/${root}`
                   ? route.replace('index', '')
                   : `${route}/`;
               } else {
@@ -121,60 +136,19 @@ const generateGraph = async (compilation) => {
               }
 
               if (isStatic) {
-                const fileContents = await fs.readFile(filenameUrl, 'utf8');
+                fileContents = await fs.readFile(filenameUrl, 'utf8');
                 const { attributes } = fm(fileContents);
 
                 layout = attributes.layout || layout;
                 title = attributes.title || title;
-                id = attributes.label || id;
+                label = attributes.label || label;
                 imports = attributes.imports || [];
-                filePath = `${relativeWorkspacePath}${filename}`;
 
-                // prune "reserved" attributes that are supported by Greenwood
-                // https://www.greenwoodjs.io/docs/front-matter
                 customData = attributes;
-
-                delete customData.label;
-                delete customData.imports;
-                delete customData.title;
-                delete customData.layout;
-
-                /* Menu Query
-                * Custom front matter - Variable Definitions
-                * --------------------------------------------------
-                * menu: the name of the menu in which this item can be listed and queried
-                * index: the index of this list item within a menu
-                * linkheadings: flag to tell us where to add page's table of contents as menu items
-                * tableOfContents: json object containing page's table of contents(list of headings)
-                */
-                // set specific menu to place this page
-                customData.menu = customData.menu || '';
-
-                // set specific index list priority of this item within a menu
-                customData.index = customData.index || '';
-
-                // set flag whether to gather a list of headings on a page as menu items
-                customData.linkheadings = customData.linkheadings || 0;
-                customData.tableOfContents = [];
-
-                if (customData.linkheadings > 0) {
-                  // parse markdown for table of contents and output to json
-                  customData.tableOfContents = toc(fileContents).json;
-                  customData.tableOfContents.shift();
-
-                  // parse table of contents for only the pages user wants linked
-                  if (customData.tableOfContents.length > 0 && customData.linkheadings > 0) {
-                    customData.tableOfContents = customData.tableOfContents
-                      .filter((item) => item.lvl === customData.linkheadings);
-                  }
-                }
-                /* ---------End Menu Query-------------------- */
               } else if (isDynamic) {
                 const routeWorkerUrl = compilation.config.plugins.filter(plugin => plugin.type === 'renderer')[0].provider(compilation).executeModuleUrl;
                 let ssrFrontmatter;
 
-                filePath = route;
-
                 await new Promise(async (resolve, reject) => {
                   const worker = new Worker(new URL('../lib/ssr-route-worker.js', import.meta.url));
                   const request = await requestAsObject(new Request(filenameUrl));
@@ -207,11 +181,8 @@ const generateGraph = async (compilation) => {
                     page: JSON.stringify({
                       servePage: isCustom,
                       route,
-                      id,
-                      label: id.split('-')
-                        .map((idPart) => {
-                          return `${idPart.charAt(0).toUpperCase()}${idPart.substring(1)}`;
-                        }).join(' ')
+                      root,
+                      label
                     }),
                     request
                   });
@@ -221,66 +192,93 @@ const generateGraph = async (compilation) => {
                   layout = ssrFrontmatter.layout || layout;
                   title = ssrFrontmatter.title || title;
                   imports = ssrFrontmatter.imports || imports;
-                  customData = ssrFrontmatter.data || customData;
-
-                  /* Menu Query
-                  * Custom front matter - Variable Definitions
-                  * --------------------------------------------------
-                  * menu: the name of the menu in which this item can be listed and queried
-                  * index: the index of this list item within a menu
-                  * linkheadings: flag to tell us where to add page's table of contents as menu items
-                  * tableOfContents: json object containing page's table of contents(list of headings)
-                  */
-                  customData.menu = ssrFrontmatter.menu || '';
-                  customData.index = ssrFrontmatter.index || '';
+                  label = ssrFrontmatter.label || label;
+                  customData = ssrFrontmatter || customData;
                 }
               }
 
               /*
-              * Graph Properties (per page)
-              *----------------------
-              * data: custom page frontmatter
-              * filename: base filename of the page
-              * id: filename without the extension
-              * relativeWorkspacePagePath: the file path relative to the user's workspace directory
-              * label: "pretty" text representation of the filename
-              * imports: per page JS or CSS file imports to be included in HTML output from frontmatter
-              * resources: sum of all resources for the entire page
-              * outputPath: the filename to write to when generating static HTML
-              * path: path to the file relative to the workspace
-              * route: URL route for a given page on outputFilePath
-              * layout: page layout to use as a base for a generated component
-              * title: a default value that can be used for <title></title>
-              * isSSR: if this is a server side route
-              * prerender: if this should be statically exported
-              * isolation: if this should be run in isolated mode
-              * hydration: if this page needs hydration support
-              * servePage: signal that this is a custom page file type (static | dynamic)
-              */
-              pages.push({
+               * Custom front matter - Variable Definitions
+               * --------------------------------------------------
+               * collection: the name of the collection for the page
+               * order: the order of this item within the collection
+               * tocHeading: heading size to use a Table of Contents for a page
+               * tableOfContents: json object containing page's table of contents (list of headings)
+               */
+
+              // prune "reserved" attributes that are supported by Greenwood
+              // https://www.greenwoodjs.io/docs/front-matter
+              delete customData.label;
+              delete customData.imports;
+              delete customData.title;
+              delete customData.layout;
+
+              // set flag whether to gather a list of headings on a page as menu items
+              customData.tocHeading = customData.tocHeading || 0;
+              customData.tableOfContents = [];
+
+              if (fileContents && customData.tocHeading > 0 && customData.tocHeading <= 6) {
+                // parse markdown for table of contents and output to json
+                customData.tableOfContents = toc(fileContents).json;
+                customData.tableOfContents.shift();
+
+                // parse table of contents for only the pages user wants linked
+                if (customData.tableOfContents.length > 0 && customData.tocHeading > 0) {
+                  customData.tableOfContents = customData.tableOfContents
+                    .filter((item) => item.lvl === customData.tocHeading);
+                }
+              }
+
+              /*
+               * Page Properties
+               *----------------------
+               * label: Display text for the page inferred, by default is the value of title
+               * title: used to customize the <title></title> tag of the page, inferred from the filename
+               * route: URL for accessing the page from the browser
+               * layout: the custom layout of the page
+               * data: custom page frontmatter
+               * imports: per page JS or CSS file imports specified from frontmatter
+               * resources: all script, style, etc resources for the entire page as URLs
+               * outputPath: the name of the file in the output folder
+               * isSSR: if this is a server side route
+               * prerender: if this page should be statically exported
+               * isolation: if this page should be run in isolated mode
+               * hydration: if this page needs hydration support
+               * servePage: signal that this is a custom page file type (static | dynamic)
+               */
+              const page = {
+                label,
+                title,
+                route: `${basePath}${route}`,
+                layout,
                 data: customData || {},
-                filename,
-                id,
-                relativeWorkspacePagePath: relativePagePath,
-                label: id.split('-')
-                  .map((idPart) => {
-                    return `${idPart.charAt(0).toUpperCase()}${idPart.substring(1)}`;
-                  }).join(' '),
                 imports,
                 resources: [],
+                pagePath: relativePagePath,
                 outputPath: route === '/404/'
                   ? '/404.html'
                   : `${route}index.html`,
-                path: filePath,
-                route: `${basePath}${route}`,
-                layout,
-                title,
                 isSSR: !isStatic,
                 prerender,
                 isolation,
                 hydration,
                 servePage: isCustom
-              });
+              };
+
+              pages.push(page);
+
+              // handle collections
+              const pageCollection = customData.collection;
+
+              if (pageCollection) {
+                if (!collections[pageCollection]) {
+                  collections[pageCollection] = [];
+                }
+
+                collections[pageCollection].push(page);
+              }
+
+              compilation.collections = collections;
             } else {
               console.debug(`Unhandled extension (${extension}) for route => ${route}`);
             }
@@ -320,11 +318,11 @@ const generateGraph = async (compilation) => {
             {
               ...oldGraph,
               outputPath: '/404.html',
-              filename: '404.html',
+              pagePath: './src/404.html',
               route: `${basePath}/404/`,
               path: '404.html',
-              id: '404',
-              label: 'Not Found'
+              label: 'Not Found',
+              title: 'Page Not Found'
             }
           ];
         }
@@ -346,8 +344,7 @@ const generateGraph = async (compilation) => {
             }
 
             graph.push({
-              filename: null,
-              path: null,
+              pagePath: null,
               data: {},
               imports: [],
               resources: [],
diff --git a/node_modules/@greenwood/cli/src/lifecycles/serve.js b/node_modules/@greenwood/cli/src/lifecycles/serve.js
index ae31a62..f0b95a6 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/serve.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/serve.js
@@ -337,7 +337,7 @@ async function getHybridServer(compilation) {
         if (matchingRoute.isolation || isolationMode) {
           await new Promise(async (resolve, reject) => {
             const worker = new Worker(new URL('../lib/ssr-route-worker-isolation-mode.js', import.meta.url));
-            // TODO "faux" new Request here, a better way?
+            // "faux" new Request here, a better way?
             const request = await requestAsObject(new Request(url));
 
             worker.on('message', async (result) => {
@@ -370,13 +370,13 @@ async function getHybridServer(compilation) {
         ctx.status = 200;
       } else if (isApiRoute) {
         const apiRoute = manifest.apis.get(url.pathname);
-        const entryPointUrl = new URL(`.${apiRoute.outputPath}`, outputDir);
+        const entryPointUrl = new URL(`./${apiRoute.outputPath}`, outputDir);
         let body, status, headers, statusText;
 
         if (apiRoute.isolation || isolationMode) {
           await new Promise(async (resolve, reject) => {
             const worker = new Worker(new URL('../lib/api-route-worker.js', import.meta.url));
-            // TODO "faux" new Request here, a better way?
+            // "faux" new Request here, a better way?
             const req = await requestAsObject(request);
 
             worker.on('message', async (result) => {
diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-api-routes.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-api-routes.js
index 20de63b..6e98d05 100644
--- a/node_modules/@greenwood/cli/src/plugins/resource/plugin-api-routes.js
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-api-routes.js
@@ -20,7 +20,7 @@ class ApiRoutesResource extends ResourceInterface {
 
   async serve(url, request) {
     const api = this.compilation.manifest.apis.get(url.pathname);
-    const apiUrl = new URL(`.${api.path}`, this.compilation.context.pagesDir);
+    const apiUrl = new URL(api.pagePath, this.compilation.context.pagesDir);
     const href = apiUrl.href;
 
     if (process.env.__GWD_COMMAND__ === 'develop') { // eslint-disable-line no-underscore-dangle
diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-content-as-data.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-content-as-data.js
new file mode 100644
index 0000000..5d299de
--- /dev/null
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-content-as-data.js
@@ -0,0 +1,54 @@
+import { mergeImportMap } from '../../lib/walker-package-ranger.js';
+import { ResourceInterface } from '../../lib/resource-interface.js';
+
+const importMap = {
+  '@greenwood/cli/src/data/queries.js': '/node_modules/@greenwood/cli/src/data/queries.js'
+};
+
+class ContentAsDataResource extends ResourceInterface {
+  constructor(compilation, options = {}) {
+    super(compilation, options);
+
+    this.contentType = ['text/html'];
+  }
+
+  async shouldIntercept(url, request, response) {
+    return response.headers.get('Content-Type')?.indexOf(this.contentType[0]) >= 0;
+  }
+
+  async intercept(url, request, response) {
+    const body = await response.text();
+    const newBody = mergeImportMap(body, importMap);
+
+    // TODO how come we need to forward headers, shouldn't mergeResponse do that for us?
+    return new Response(newBody, {
+      headers: response.headers
+    });
+  }
+
+  // TODO graphql based hydration?
+  // async shouldOptimize(url, response) {
+  //   return response.headers.get('Content-Type').indexOf(this.contentType[1]) >= 0;
+  // }
+
+  // async optimize(url, response) {
+  //   let body = await response.text();
+
+  //   body = body.replace('<head>', `
+  //     <head>
+  //       <script data-state="apollo" data-gwd-opt="none">
+  //         window.__APOLLO_STATE__ = true;
+  //       </script>
+  //   `);
+
+  //   return new Response(body);
+  // }
+}
+
+const greenwoodPluginContentAsData = {
+  type: 'resource',
+  name: 'plugin-content-as-data:resource',
+  provider: (compilation) => new ContentAsDataResource(compilation)
+};
+
+export { greenwoodPluginContentAsData };
\ No newline at end of file
diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-node-modules.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-node-modules.js
index 286c2de..a336aed 100644
--- a/node_modules/@greenwood/cli/src/plugins/resource/plugin-node-modules.js
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-node-modules.js
@@ -10,7 +10,7 @@ import replace from '@rollup/plugin-replace';
 import { getNodeModulesLocationForPackage, getPackageJson, getPackageNameFromUrl } from '../../lib/node-modules-utils.js';
 import { resolveForRelativeUrl } from '../../lib/resource-utils.js';
 import { ResourceInterface } from '../../lib/resource-interface.js';
-import { walkPackageJson } from '../../lib/walker-package-ranger.js';
+import { walkPackageJson, mergeImportMap } from '../../lib/walker-package-ranger.js';
 
 let importMap;
 
@@ -98,15 +98,16 @@ class NodeModulesResource extends ResourceInterface {
       : importMap || {};
 
     // apply import map and shim for users
-    body = body.replace('<head>', `
-      <head>
-        ${importMapShimScript}
-        <script type="${importMapType}">
-          {
-            "imports": ${JSON.stringify(importMap, null, 1)}
-          }
-        </script>
-    `);
+    body = mergeImportMap(body, importMap);
+    // body = body.replace('<head>', `
+    //   <head>
+    //     ${importMapShimScript}
+    //     <script type="${importMapType}">
+    //       {
+    //         "imports": ${JSON.stringify(importMap, null, 1)}
+    //       }
+    //     </script>
+    // `);
 
     return new Response(body);
   }
diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-html.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-html.js
index 06223cf..b372e38 100644
--- a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-html.js
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-html.js
@@ -5,7 +5,6 @@
  * This is a Greenwood default plugin.
  *
  */
-import frontmatter from 'front-matter';
 import fs from 'fs/promises';
 import rehypeStringify from 'rehype-stringify';
 import rehypeRaw from 'rehype-raw';
@@ -37,18 +36,16 @@ class StandardHtmlResource extends ResourceInterface {
 
   async serve(url, request) {
     const { config, context } = this.compilation;
-    const { pagesDir, userWorkspace } = context;
-    const { interpolateFrontmatter } = config;
+    const { projectDirectory, pagesDir } = context;
+    const { activeFrontmatter } = config;
     const { pathname } = url;
     const isSpaRoute = this.compilation.graph.find(node => node.isSPA);
     const matchingRoute = this.compilation.graph.find((node) => node.route === pathname) || {};
-    const filePath = !matchingRoute.external ? matchingRoute.path : '';
-    const isMarkdownContent = (matchingRoute?.filename || '').split('.').pop() === 'md';
-
+    const { pagePath } = matchingRoute;
+    const filePath = !matchingRoute.external ? pagePath : '';
+    const isMarkdownContent = (filePath || '').split('.').pop() === 'md';
     let body = '';
-    let title = matchingRoute.title || null;
     let layout = matchingRoute.layout || null;
-    let frontMatter = matchingRoute.data || {};
     let customImports = matchingRoute.imports || [];
     let ssrBody;
     let ssrLayout;
@@ -59,7 +56,7 @@ class StandardHtmlResource extends ResourceInterface {
     }
 
     if (isMarkdownContent) {
-      const markdownContents = await fs.readFile(filePath, 'utf-8');
+      const markdownContents = await fs.readFile(new URL(pagePath, pagesDir), 'utf-8');
       const rehypePlugins = [];
       const remarkPlugins = [];
 
@@ -74,7 +71,6 @@ class StandardHtmlResource extends ResourceInterface {
       }
 
       const settings = config.markdown.settings || {};
-      const fm = frontmatter(markdownContents);
 
       processedMarkdown = await unified()
         .use(remarkParse, settings) // parse markdown into AST
@@ -85,27 +81,10 @@ class StandardHtmlResource extends ResourceInterface {
         .use(rehypePlugins) // apply userland rehype plugins
         .use(rehypeStringify) // convert AST to HTML string
         .process(markdownContents);
-
-      // configure via frontmatter
-      if (fm.attributes) {
-        frontMatter = fm.attributes;
-
-        if (frontMatter.title) {
-          title = frontMatter.title;
-        }
-
-        if (frontMatter.layout) {
-          layout = frontMatter.layout;
-        }
-
-        if (frontMatter.imports) {
-          customImports = frontMatter.imports;
-        }
-      }
     }
 
     if (matchingRoute.isSSR) {
-      const routeModuleLocationUrl = new URL(`.${matchingRoute.relativeWorkspacePagePath}`, pagesDir);
+      const routeModuleLocationUrl = new URL(pagePath, pagesDir);
       const routeWorkerUrl = this.compilation.config.plugins.find(plugin => plugin.type === 'renderer').provider().executeModuleUrl;
 
       await new Promise(async (resolve, reject) => {
@@ -139,12 +118,12 @@ class StandardHtmlResource extends ResourceInterface {
     }
 
     if (isSpaRoute) {
-      body = await fs.readFile(new URL(`./${isSpaRoute.filename}`, userWorkspace), 'utf-8');
+      body = await fs.readFile(new URL(isSpaRoute.pagePath, projectDirectory), 'utf-8');
     } else {
-      body = ssrLayout ? ssrLayout : await getPageLayout(filePath, this.compilation, layout);
+      body = ssrLayout ? ssrLayout : await getPageLayout(pagePath, this.compilation, layout);
     }
 
-    body = await getAppLayout(body, this.compilation, customImports, title);
+    body = await getAppLayout(body, this.compilation, customImports, matchingRoute);
     body = await getUserScripts(body, this.compilation);
 
     if (processedMarkdown) {
@@ -171,15 +150,30 @@ class StandardHtmlResource extends ResourceInterface {
       body = body.replace(/\<content-outlet>(.*)<\/content-outlet>/s, `<!-- greenwood-ssr-start -->${ssrBody.replace(/\$/g, '$$$')}<!-- greenwood-ssr-end -->`);
     }
 
-    if (interpolateFrontmatter) {
-      for (const fm in frontMatter) {
+    if (activeFrontmatter) {
+      for (const fm in matchingRoute.data) {
         const interpolatedFrontmatter = '\\$\\{globalThis.page.' + fm + '\\}';
+        const needle = typeof matchingRoute.data[fm] === 'string' ? matchingRoute.data[fm] : JSON.stringify(matchingRoute.data[fm]).replace(/"/g, '&quot;');
+
+        body = body.replace(new RegExp(interpolatedFrontmatter, 'g'), needle);
+      }
+
+      const activeFrontmatterForwardKeys = ['route', 'label', 'title'];
+
+      for (const key of activeFrontmatterForwardKeys) {
+        const interpolatedFrontmatter = '\\$\\{globalThis.page.' + key + '\\}';
+
+        body = body.replace(new RegExp(interpolatedFrontmatter, 'g'), matchingRoute[key]);
+      }
+
+      for (const collection in this.compilation.collections) {
+        const interpolatedFrontmatter = '\\$\\{globalThis.collection.' + collection + '\\}';
 
-        body = body.replace(new RegExp(interpolatedFrontmatter, 'g'), frontMatter[fm]);
+        body = body.replace(new RegExp(interpolatedFrontmatter, 'g'), JSON.stringify(this.compilation.collections[collection]).replace(/"/g, '&quot;'));
       }
     }
 
-    // clean up placeholder content-outlet
+    // clean up any empty placeholder content-outlet
     if (body.indexOf('<content-outlet></content-outlet>') > 0) {
       body = body.replace('<content-outlet></content-outlet>', '');
     }
diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-static-router.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-static-router.js
index 4145ec5..f039e61 100644
--- a/node_modules/@greenwood/cli/src/plugins/resource/plugin-static-router.js
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-static-router.js
@@ -69,7 +69,7 @@ class StaticRouterResource extends ResourceInterface {
       .filter(page => !page.isSSR)
       .filter(page => !page.route.endsWith('/404/'))
       .map((page) => {
-        const layout = page.filename && page.filename.split('.').pop() === this.extensions[0]
+        const layout = page.pagePath && page.pagePath.split('.').pop() === this.extensions[0]
           ? page.route
           : page.layout;
         const key = page.route === '/'
diff --git a/node_modules/@greenwood/cli/src/plugins/server/plugin-content.js b/node_modules/@greenwood/cli/src/plugins/server/plugin-content.js
new file mode 100644
index 0000000..5023e6a
--- /dev/null
+++ b/node_modules/@greenwood/cli/src/plugins/server/plugin-content.js
@@ -0,0 +1,47 @@
+import Koa from 'koa';
+import { ServerInterface } from '../../lib/server-interface.js';
+import { Readable } from 'stream';
+
+class ContentServer extends ServerInterface {
+  constructor(compilation, options = {}) {
+    super(compilation, options);
+  }
+
+  async start() {
+    const app = new Koa();
+
+    app.use(async (ctx, next) => {
+      try {
+        if (ctx.request.path.startsWith('/graph.json')) {
+          const { graph } = this.compilation;
+
+          ctx.body = Readable.from(JSON.stringify(graph));
+          ctx.status = 200;
+          ctx.message = 'OK';
+
+          ctx.set('Content-Type', 'application/json');
+          ctx.set('Access-Control-Allow-Origin', '*');
+        }
+      } catch (e) {
+        ctx.status = 500;
+        console.error(e);
+      }
+
+      await next();
+    });
+
+    // TODO use dev server +1
+    await app.listen('1985', () => {
+      console.log('Started content server at => http://localhost:1985');
+    });
+  }
+}
+
+// TODO remove graph.json resolution from regular dev server?
+const greenwoodPluginContentServer = {
+  type: 'server',
+  name: 'plugin-content-server',
+  provider: (compilation) => new ContentServer(compilation)
+};
+
+export { greenwoodPluginContentServer };
\ No newline at end of file
