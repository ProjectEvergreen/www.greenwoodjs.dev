diff --git a/node_modules/@greenwood/cli/src/config/rollup.config.js b/node_modules/@greenwood/cli/src/config/rollup.config.js
index 73ddb24..2b3cbb2 100644
--- a/node_modules/@greenwood/cli/src/config/rollup.config.js
+++ b/node_modules/@greenwood/cli/src/config/rollup.config.js
@@ -44,7 +44,7 @@ function greenwoodResourceLoader (compilation) {
       };
 
       // filter first for any bare specifiers
-      if (await checkResourceExists(idUrl) && extension !== 'js') {
+      if (await checkResourceExists(idUrl)) {
         for (const plugin of resourcePlugins) {
           if (plugin.shouldResolve && await plugin.shouldResolve(idUrl)) {
             idUrl = new URL((await plugin.resolve(idUrl)).url);
@@ -74,6 +74,12 @@ function greenwoodResourceLoader (compilation) {
           }
         }
 
+        for (const plugin of resourcePlugins) {
+          if (plugin.shouldOptimize && await plugin.shouldOptimize(idUrl, response.clone())) {
+            response = await plugin.optimize(idUrl, response.clone());
+          }
+        }
+
         return await response.text();
       }
     }
@@ -85,6 +91,11 @@ function greenwoodSyncPageResourceBundlesPlugin(compilation) {
     name: 'greenwood-sync-page-resource-bundles-plugin',
     async writeBundle(outputOptions, bundles) {
       const { outputDir } = compilation.context;
+      const resourcePlugins = compilation.config.plugins.filter((plugin) => {
+        return plugin.type === 'resource';
+      }).map((plugin) => {
+        return plugin.provider(compilation);
+      });
 
       for (const resource of compilation.resources.values()) {
         const resourceKey = normalizePathnameForWindows(resource.sourcePathURL);
diff --git a/node_modules/@greenwood/cli/src/lifecycles/serve.js b/node_modules/@greenwood/cli/src/lifecycles/serve.js
index 6201ea8..855c3fd 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/serve.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/serve.js
@@ -70,7 +70,7 @@ async function getDevServer(compilation) {
           const merged = mergeResponse(response.clone(), current.clone());
 
           response = merged;
-          break;
+          // break;
         }
       }
 
diff --git a/node_modules/@greenwood/cli/src/loader.js b/node_modules/@greenwood/cli/src/loader.js
index 5d347bc..6c1cba0 100644
--- a/node_modules/@greenwood/cli/src/loader.js
+++ b/node_modules/@greenwood/cli/src/loader.js
@@ -3,7 +3,8 @@ import { readAndMergeConfig as initConfig } from './lifecycles/config.js';
 const config = await initConfig();
 const resourcePlugins = config.plugins.filter(plugin => plugin.type === 'resource').map(plugin => plugin.provider({
   context: {
-    projectDirectory: new URL(`file://${process.cwd()}`)
+    projectDirectory: new URL(`file://${process.cwd()}/`),
+    scratchDir: new URL(`file://${process.cwd()}/.greenwood/`)
   },
   config: {
     devServer: {}
diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
index 64c1ba0..4018125 100644
--- a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
@@ -88,6 +88,7 @@ function bundleCss(body, url, compilation) {
           case 'nth-last-child':
           case 'nth-of-type':
           case 'nth-last-of-type':
+          case 'where':
             optimizedCss += '(';
             break;
           default:
@@ -197,6 +198,7 @@ function bundleCss(body, url, compilation) {
             case 'nth-last-child':
             case 'nth-last-of-type':
             case 'nth-of-type':
+            case 'where':
               optimizedCss += ')';
               break;
             default:
@@ -265,7 +267,8 @@ class StandardCssResource extends ResourceInterface {
     const { pathname, searchParams } = url;
     const ext = pathname.split('.').pop();
 
-    return url.protocol === 'file:' && ext === this.extensions[0] && request.headers.get('Accept')?.indexOf('text/javascript') >= 0 && !searchParams.has('type');
+    // TODO how to make sure this isn't clashing with other CSS in JS types...
+    return url.protocol === 'file:' && ext === this.extensions[0] && request.headers.get('Accept')?.indexOf('text/javascript') >= 0 && !searchParams.has('type') && pathname.indexOf('module.css') < 0;
   }
 
   async intercept(url, request, response) {
